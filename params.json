{
  "name": "tsoa",
  "tagline": "Build swagger-compliant REST APIs using TypeScript and Node",
  "body": "[ ![Codeship Status for lukeautry/tsoa](https://codeship.com/projects/cdce38d0-1f6b-0134-258e-1ed679ae6c9d/status?branch=master)](https://codeship.com/projects/160322)\r\n\r\n## Goal\r\n\r\n- TypeScript controllers and models as the single source of truth for your API\r\n- A valid swagger spec is generated from your controllers and models, including:\r\n    - Paths (e.g. GET /Users)\r\n    - Definitions based on TypeScript interfaces (models)\r\n    - Parameters/model properties marked as required or optional based on TypeScript (e.g. myProperty?: string is optional in the Swagger spec)\r\n    - jsDoc supported for object descriptions (most other metadata can be inferred from TypeScript types)\r\n- Routes are generated for middleware of choice\r\n    - Express currently included, other middleware can be supported using a simple handlebars template\r\n\r\n## Philosophy\r\n\r\n- Rely on TypeScript type annotations to generate API metadata if possible\r\n- If regular type annotations aren't an appropriate way to express metadata, use decorators\r\n- Use jsdoc for pure text metadata (e.g. endpoint descriptions)\r\n- Minimize boilerplate\r\n\r\n## How it works\r\n\r\n### Create Controllers\r\n\r\n```typescript\r\n// controllers/usersController.ts\r\n\r\nimport {Get, Route} from 'tsoa';\r\nimport {UserService} from '../services/userService';\r\nimport {User, UserCreationRequest} from '../models/user';\r\n\r\n@Route('Users')\r\nexport class UsersController {\r\n    @Get('{id})\r\n    public async getUser(id: number): Promise<User> {\r\n        return await new UserService().get(id);\r\n    }\r\n\r\n    @Post()\r\n    public async createUser(request: UserCreationRequest): Promise<User> {\r\n        return await new UserService().create(reqest);\r\n    }\r\n}\r\n```\r\n### Create Models\r\n```typescript\r\n// models/user.ts\r\n\r\nexport interface User {\r\n    id: number;\r\n    email: string;\r\n    name: Name;\r\n    status?: string;\r\n    phoneNumbers: string[];\r\n}\r\n\r\nexport interface Name {\r\n    first: string;\r\n    last?: string;\r\n}\r\n\r\nexport interface UserCreationRequest {\r\n    email: string;\r\n    name: Name;\r\n    phoneNumbers: string[];\r\n}\r\n```\r\n\r\n### Generate!\r\n\r\nFrom command line/npm script:\r\n```\r\nswagger-ts-generate --entryFile=./src/server.ts --swaggerDir=./dist --routesDir=./src\r\n```\r\n- entryFile: Entry point for your application\r\n- swaggerDir: Where you want swagger.json to be dropped\r\n- routesDir: Where you want routes.ts to be dropped\r\n\r\n### Consume generated routes\r\n\r\n```typescript\r\nimport * as methodOverride from 'method-override';\r\nimport * as express from 'express';\r\nimport * as bodyParser from 'body-parser';\r\nimport {RegisterRoutes} from './routes';\r\n\r\n// controllers need to be referenced in order to get crawled by the generator\r\nimport './controllers/usersController';\r\n\r\napp: express.Express = express();\r\napp.use(bodyParser.urlencoded({ extended: true }));\r\napp.use(bodyParser.json());\r\napp.use(methodOverride());\r\n\r\nRegisterRoutes(app);\r\n\r\napp.listen(3000);\r\n\r\n```\r\n\r\n### Use awesome Swagger tools\r\n\r\nNow that you have a swagger spec (swagger.json), you can use all kinds of amazing tools that generate documentation, client SDKs, and more.\r\n\r\n## Installation\r\n\r\n```\r\nnpm install tsoa --save\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}